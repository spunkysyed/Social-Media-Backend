{
    "openapi":"3.0.0",
    "info":{
        "version":"1.0.0",
        "description":"API for Social Media",
        "title":"Social Media Backend Api"
    },
    "servers": [
        {
            "url": "http://localhost:4000"
        }
    ],
    "components": {
        "securitySchemes": {
            "JWT" : {
                "in": "header",
                "name": "Authorization",
                "type": "apiKey"
            }
        }
    },
    "paths":{
        "/api/users/signin": {
            "post":{
                "tags": ["User"],
                "summary":"Login",
                "description":"User login to get token",
                "requestBody":{
                    "content": {
                       "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email":{
                                        "type": "string"
                                    },
                                    "password":{
                                        "type": "string"
                                    }
                                }
                            }
                       }
                    }
                },
                "responses":{
                    "200": {
                        "description": "User login successful"
                    },
                    "400": {
                        "description": "Invalid credentials"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/users/signup": {
            "post":{
                "tags": ["User"],
                "summary":"Register",
                "description":"Returns newly created user object",
                "requestBody":{
                    "content": {
                       "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name":{
                                        "type": "string"
                                    },
                                    "email":{
                                        "type": "string"
                                    },
                                    "password":{
                                        "type": "string"
                                    }
                                }
                            }
                       }
                    }
                },
                "responses":{
                    "201": {
                        "description": "Account created successfully"
                    },
                    "400": {
                        "description": "Account Not Created"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/users/get-details": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get User Details By EmailId",
                "description": "Get details for a specific user by EmailID.",
                "requestBody":{
                    "content": {
                       "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    
                                    "email":{
                                        "type": "string"
                                    }
                                }
                            }
                       }
                    }
                },
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetched user data successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "User Details Not Found"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/users/get-all-details": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get All Users' Details",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "description": "Get details of all users.",
                "responses": {
                    "200": {
                        "description": "All users data"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No users found"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/users/update-details/{userId}": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update User Details By ID",
                "description": "Update details for a specific user by ID.",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "ID of the user to update details"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "gender": {
                                        "type": "string"
                                    },
                                    "imageURL": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Image file for the post"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/users/logout": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "User Logout",
                "description": "Logout the user from the portal.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successfully!"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/users/logout-all-device": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "User Logout From All Devices",
                "description": "Logout the user from all devices.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout From All Devices Successfull"
                    },
                    "500": {
                        "description": "Something went wrong. Please try later."
                    }
                }
            }
        },
        "/api/posts/": {
            "post": {
                "tags": [
                    "Posts"
                ],
                "summary": "Create a new post",
                "description": "Creates a new post with a caption and an image.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "caption": {
                                        "type": "string",
                                        "description": "Caption for the post"
                                    },
                                    "imageURL": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Image file for the post"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post Created successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/posts/all": {
            "get":{
                "tags": ["Posts"],
                "summary":"Get all posts",
                "description":"Returns all the posts",
                "security": [
                    { "JWT": {} }
                ],
                "responses":{
                    "200": {
                        "description":"All posts"
                    },
                    "500": {
                        "description":"Something Went Wrong"
                    }
                }
            }
        },

        "/api/posts/{ID}": {
            "get": {
                "tags": ["Posts"],
                "summary": "Get a specific post By ID",
                "parameters": [
                    {
                        "name": "ID",
                        "in": "path",
                        "required": true,
                        "description": "Enter the post id"
                    }
                ],
                "description": "Takes the post id as url parameters and returns the post with the specific post id.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetched post data successfully"
                    },
                    "404": {
                        "description": "Post Not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description":"Something Went Wrong"
                    }
                }
            },
            "delete": {
                "tags": ["Posts"],
                "summary": "Delete post by ID",
                "parameters": [
                    {
                        "name": "ID",
                        "in": "path",
                        "required": true,
                        "description": "Enter the post id"
                    }
                ],
                "description": "Takes the post id as url parameters and deletes the specific post id.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post deleted"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description":"Something Went Wrong"
                    }
                }
            },
            "put": {
                "tags": ["Posts"],
                "summary": "Update a post",
                "parameters": [
                    {
                        "name": "ID",
                        "in": "path",
                        "required": true,
                        "description": "Enter the post id"
                    }
                ],
                "description": "Takes the post ID as URL parameter and returns the updated post object.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "caption": {
                                        "type": "string",
                                        "description": "Caption for the post"
                                    },
                                    "imageURL": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Image file for the post"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post updated successfully"
                    },
                    "404": {
                        "description": "Post not Updated"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/comments/{postId}": {
            "post": {
                "tags": ["Comments"],
                "summary": "Add a comment for a specific post",
                "parameters": [
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "description": "Enter the post ID"
                    }
                ],
                "description": "Takes the post ID as a URL parameter and adds a new comment to the specified post.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Comment added successfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            },
            "get": {
                "tags": ["Comments"],
                "summary": "Get all comments of a specific post",
                "parameters": [
                    {
                        "name": "postId",
                        "in": "path",
                        "required": true,
                        "description": "Enter the post ID"
                    }
                ],
                "description": "Takes the post ID as a URL parameter and returns all comments for the specified post.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All comments of the requested post"
                    },
                    "404": {
                        "description": "Comment Not Found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/api/comments/{commentId}": {
            "put": {
                "tags": ["Comments"],
                "summary": "Update a comment by ID",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "description": "Enter the comment ID"
                    }
                ],
                "description": "Takes the comment ID as a URL parameter and updates the specified comment.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Comment updated successfully"
                    },
                    "404": {
                        "description": "Comment not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            },
            "delete": {
                "tags": ["Comments"],
                "summary": "Delete a comment by ID",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "required": true,
                        "description": "Enter the comment ID"
                    }
                ],
                "description": "Takes the comment ID as a URL parameter and deletes the specified comment.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Comment deleted"
                    },
                    "404": {
                        "description": "Comment not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        
        "/api/likes/{postId}": {
            "get": {
                "tags": ["Likes"],
                "summary": "Get likes of a specific post",
                "parameters": [
                    {
                        "name": "ID",
                        "in": "path",
                        "required": true,
                        "description": "Enter The Post ID"
                    }
                ],
                "description": "Takes the post/comment id as url parameters and returns the likes for the specific post/comment.",
                "security": [
                    {
                        "JWT": {}
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fetched likes"
                    },
                    "404": {
                        "description": "Likes Not Found!"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/likes/toggle/{postId}": {
            "get": {
                "tags": ["Likes"],
                "summary": "Likes And Unlikes A Specific Post",
                "description": "Toggles the like status for a specific post based on ID",
                "parameters": [
                    {
                        "name": "ID",
                        "in": "path",
                        "required": true,
                        "description": "Enter the Post ID"
                    }
                ],
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Added/Removed Like successfully"
                    },
                    "500": {
                        "description": "Something went wrong"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                    
                }
            }
        },
        "/api/otp/send": {
            "post": {
                "tags": [
                    "OTP"
                ],
                "summary": "Send OTP",
                "description": "Send OTP to a user's email",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "User's email to send OTP"
                                    }
                                },
                                "required": [
                                    "email"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP sent successfully"
                    },
                    "500": {
                        "description": "Something went Wrong"
                    },
                    "404": {
                        "description": "User not found. Please signup"
                    }
                }
            }
        },
        "/api/otp/verify": {
            "post": {
                "tags": [
                    "OTP"
                ],
                "summary": "Verify OTP",
                "description": "Verify user-entered OTP",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "otp": {
                                        "type": "number",
                                        "description": "User-entered OTP"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "User's email"
                                    }
                                },
                                "required": [
                                    "otp",
                                    "email"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OTP verified successfully"
                    },
                    "400": {
                        "description": "Invalid OTP or OTP expired"
                    },
                    "404": {
                        "description": "User Not Found"
                    },
                    "500": {
                        "description": "Something Went Wrong"
                    }
                }
            }
        },
        "/api/otp/reset-password": {
            "post": {
                "tags": [
                    "OTP"
                ],
                "summary": "Reset Password Using OTP",
                "description": "Reset user's password using verified OTP",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "newPassword": {
                                        "type": "string",
                                        "description": "User's new password"
                                    },
                                    "email": {
                                        "type": "string",
                                        "description": "User's email"
                                    },
                                    "otpCode": {
                                        "type": "number",
                                        "description": "OTP code sent to user's email"
                                    }
                                },
                                "required": [
                                    "newPassword", 
                                    "email",
                                    "otpCode"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Password reset successfully"
                    },
                    "400": {
                        "description": "Invalid OTP"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Something went Wrong"
                    }
                }
            }
        },
        "/api/friends/toggle-friendship/{friendId}": {
            "get": {
                "tags": [
                    "Friendship"
                ],
                "summary": "Toggle Friendship Status",
                "description": "Toggle friendship status between users based on friendId.",
                "parameters": [
                    {
                        "name": "friendId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "ID of the friend to toggle friendship status"
                    }
                ],
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Accepted/Rejected Succesfully"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },  
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/friends/get-pending-requests": {
            "get": {
                "tags": [
                    "Friendship"
                ],
                "summary": "Get Pending Friend Requests",
                "description": "Retrieve pending friend requests.",
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pending requests fetched"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No Requests are pending"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/friends/response-to-request/{friendId}": {
            "get": {
                "tags": [
                    "Friendship"
                ],
                "summary": "Respond To Friend Request",
                "description": "Respond to a friend request based on friendId.",
                "parameters": [
                    {
                        "name": "friendId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "ID of the friend request to respond to"
                    }
                ],
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "response": {
                                        "type": "string",
                                        "description": "response to request, accept or reject"
                                    }
                                },
                                "required": [
                                    "response"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Friend request accepted/rejected"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No Firends Request Found"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        },
        "/api/friends/get-friends/{userId}": {
            "get": {
                "tags": [
                    "Friendship"
                ],
                "summary": "Get User's Friend List",
                "description": "Retrieve the friend list of a specific user based on userId.",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "ID of the user to retrieve friend list"
                    }
                ],
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Freinds fetched"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No freinds found"
                    },
                    "500": {
                        "description": "Something went wrong"
                    }
                }
            }
        }
    }
}